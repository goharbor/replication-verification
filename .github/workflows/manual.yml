# This is used to trigger a replication testing based on some github commit.
# The param ref is the full commit id or PR ref(refs/pull/12878/merge), version is the case folder (master/2.0.0/1.10.0), optional cases are separated by space.
#  curl -u username:password -X POST https://api.github.com/repos/goharbor/replication-verification/dispatches -d '
#  {
#    "event_type": "testit","client_payload": {"ref":"refs/pull/12878/merge","version":"2.0.0","cases":"GoogleGCR DockerHub"}
#  }'

name: CI

env:
  POSTGRESQL_HOST: localhost
  POSTGRESQL_PORT: 5432
  POSTGRESQL_USR: postgres
  POSTGRESQL_PWD: root123
  POSTGRESQL_DATABASE: registry
  DOCKER_COMPOSE_VERSION: 1.23.0
  HARBOR_ADMIN: admin
  HARBOR_ADMIN_PASSWD: Harbor12345
  CORE_SECRET: tempString
  KEY_PATH: "/data/secret/keys/secretkey"
  REDIS_HOST: localhost
  REG_VERSION: v2.7.1-patch-2819-2553
  UI_BUILDER_VERSION: 1.6.0

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  repository_dispatch:
    types: [testit]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    strategy:
      fail-fast: false
    # The type of runner that the job will run on
    runs-on:
      #    - self-hosted
      - ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: prepare
        shell: bash
        run: |
          echo ${{ github.event.client_payload.ref }}
          echo ${{ github.event.client_payload.version }}
          cases="${{ github.event.client_payload.cases }}"
          if [ "$cases" != "" ]; then
            for case in $cases;do
              echo $case
            done
          else
            cases="Harbor DockerHub AliACR Gitlab AwsECR GoogleGCR AzureACR Quay TencentTCR GithubGCR"
          fi

      - name: checkout harbor ${{ github.event.client_payload.ref }}
        uses: actions/checkout@v2
        with:
          repository: 'goharbor/harbor'
          ref: ${{ github.event.client_payload.ref }}
          path: src/github.com/goharbor/harbor
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.8
        id: go
      - name: setup Docker
        uses: docker-practice/actions-setup-docker@0.0.1
        with:
          docker_version: 18.09
          docker_channel: stable
      - name: setup env
        run: |
          cd src/github.com/goharbor/harbor
          pwd
          go env
          echo "::set-env name=GOPATH::$(go env GOPATH):$GITHUB_WORKSPACE"
          echo "::add-path::$(go env GOPATH)/bin"
          echo "::set-env name=TOKEN_PRIVATE_KEY_PATH::${GITHUB_WORKSPACE}/src/github.com/goharbor/harbor/tests/private_key.pem"
        shell: bash
      - name: before_install
        run: |
          set -x
          cd src/github.com/goharbor/harbor
          pwd
          env
          #sudo apt install -y xvfb
          #xvfb-run ls
          curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
          chmod +x docker-compose
          sudo mv docker-compose /usr/local/bin
          IP=`hostname -I | awk '{print $1}'`
          echo '{"insecure-registries" : ["'$IP':5000"]}' | sudo tee /etc/docker/daemon.json
          echo "::set-env name=IP::$IP"
          sudo cp ./tests/harbor_ca.crt /usr/local/share/ca-certificates/
          sudo update-ca-certificates
          sudo service docker restart
      - name: install
        run: |
          cd src/github.com/goharbor/harbor
          env
          df -h
          docker system prune -a -f
          bash ./tests/showtime.sh ./tests/ci/api_common_install.sh $IP DB

      - name: checkout verification
        uses: actions/checkout@v2.1.1
        with:
          path: verification

      - name: setup test
        run: |
          sudo apt install -y python-pip libnss3-tools unzip graphicsmagick
          sudo pip install robotframework==3.0.4 robotframework-sshlibrary robotframework-httplibrary requests dbbot robotframework-seleniumlibrary==4.4.0 robotframework-selenium2library robotframework-pabot robotframework-JSONLibrary
          sudo bash -c "wget -Nq http://chromedriver.storage.googleapis.com/2.40/chromedriver_linux64.zip && \
            unzip chromedriver_linux64.zip && \
            chmod a+x chromedriver && ls -l && \
            mv -f chromedriver /usr/local/share/chromedriver && \
            ln -f -s /usr/local/share/chromedriver /usr/local/bin/chromedriver && \
            rm -f chromedriver_linux64.zip"

      - name: run test
        run: |
          set +e
          cd verification
          target_version=${{ github.event.client_payload.version }}
          cd ${target_version}
          cd cases
          cases="${{ github.event.client_payload.cases }}"
          if [ "$cases" = "" ]; then
            cases="Harbor DockerHub AliACR Gitlab AwsECR GoogleGCR AzureACR Quay TencentTCR GithubGCR"
          fi
          for case in $cases;do
            echo $case
            if [ ! -f $case.robot ]; then echo skip $case.robot; continue; fi
            repo=$(echo mybusybox-${target_version}-${case} | tr 'A-Z' 'a-z')
            ../../create-image.sh $repo:${case} || exit 1
            python -u -m robot.run -X -v ip:$IP -v repo:${repo} -v tag:${case} -v ecr_ac_id:${{ secrets.AWS_ACCESS_KEY_ID }} -v ecr_ac_key:${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -v azure_ac_id:${{ secrets.AZURE_ACCESS_ID }} -v azure_ac_key:${{ secrets.AZURE_ACCESS_KEY }} -v gcr_ac_key:'${{ secrets.GCR_AC_KEY }}' -v quay_ac_key:'${{ secrets.QUAY_AC_KEY }}'\
              -v gitlab_id:'${{ secrets.GITLAB_ID }}' -v gitlab_key:'${{ secrets.GITLAB_KEY }}' -v ali_ac_id:'${{ secrets.ALI_AC_ID }}' -v ali_ac_key:'${{ secrets.ALI_AC_KEY }}' \
              -v harbor_ac_id:'${{ secrets.HARBOR_AC_ID }}' -v harbor_ac_key:'${{ secrets.HARBOR_AC_KEY }}' -v dockerhub_ac_id:'${{ secrets.DOCKERHUB_AC_ID }}' -v dockerhub_ac_key:'${{ secrets.DOCKERHUB_AC_KEY }}' \
              $case.robot
            num=$(grep good checkpoint.txt|wc -l||echo 0)
            ../../save-status.sh $num st-${target_version}-$case
            if [ "$num" == "4" ];then
              cp ../../good.gif ../../results/st-${target_version}-${case}.gif;
            else
              ../../save-record.sh st-${target_version}-${case}
            fi
            rm -f checkpoint.txt
          done
      - name: show result
        run: |
          cd verification
          grep "" results/st-*.txt || echo no results
